{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","candidate","selected","containerStyles","width","margin","buttonStyles","padding","textAlign","backgroundColor","fontWeight","cursor","borderRadius","optionStyles","Object","objectSpread","rankStyles","display","marginRight","color","dropdownStyles","fontSize","submitStyles","marginTop","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","target","_event$target","value","previousValue","id","_assertThisInitialize","assertThisInitialized","container","current","_assertThisInitialize2","state","ranks","menus","querySelectorAll","hasPreviousValue","previousOptionIndex","findIndex","o","optionIndex","push","menuId","slice","forEach","menu","i","menuValue","pop","option","find","setState","handleSubmit","submitted","createRef","_this2","react_default","a","createElement","Fragment","style","ref","map","_","key","htmlFor","concat","onChange","defaultValue","j","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.564f77cc.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\n\nconst options = [\n  { candidate: \"Barack Obama\", selected: false },\n  { candidate: \"George Bush\", selected: false },\n  { candidate: \"Hillary Clinton\", selected: false },\n  { candidate: \"Bernie Sanders\", selected: false },\n  { candidate: \"Marco Rubio\", selected: false },\n  { candidate: \"George Washington\", selected: false },\n  { candidate: \"John Adams\", selected: false },\n  { candidate: \"Abraham Lincoln\", selected: false },\n  { candidate: \"Franklin D. Roosevelt\", selected: false },\n  { candidate: \"Ron Swanson\", selected: false }\n];\n\nconst containerStyles = {\n  width: \"250px\",\n  margin: \"0 auto\"\n};\nconst buttonStyles = {\n  width: \"100%\",\n  padding: \"8px 0\",\n  textAlign: \"center\",\n  backgroundColor: \"#d8d8d8\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: \"3px\"\n};\nconst optionStyles = {\n  ...buttonStyles,\n  margin: \"10px 0\",\n  padding: 0,\n  textAlign: \"left\"\n};\nconst rankStyles = {\n  display: \"inline-block\",\n  marginRight: \"8px\",\n  padding: \"8px\",\n  backgroundColor: \"#2c5c6c\",\n  color: \"white\",\n  borderRadius: \"3px 0 0 3px\"\n};\nconst dropdownStyles = {\n  fontSize: \"15px\"\n};\nconst submitStyles = {\n  ...buttonStyles,\n  marginTop: \"20px\",\n  backgroundColor: \"#00b06f\",\n  color: \"white\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ranks: [options[0]], options, submitted: false };\n    this.container = createRef();\n  }\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, previousValue, id }\n    } = event;\n    const {\n      container: { current: container },\n      state: { options, ranks }\n    } = this;\n    const menus = container.querySelectorAll(\"select\");\n    const hasPreviousValue = previousValue && previousValue !== \"skip\";\n    if (hasPreviousValue) {\n      const previousOptionIndex = options.findIndex(\n        o => o.candidate === previousValue\n      );\n      options[previousOptionIndex].selected = false;\n    }\n    if (value !== \"skip\") {\n      const optionIndex = options.findIndex(o => o.candidate === value);\n      options[optionIndex].selected = true;\n      if (!hasPreviousValue) {\n        ranks.push({});\n      }\n    } else if (hasPreviousValue) {\n      const menuId = id.slice(-1);\n      menus.forEach((menu, i) => {\n        const { value: menuValue } = menu;\n        if (i > menuId) {\n          ranks.pop();\n          const option = options.find(o => o.candidate === menuValue);\n          if (option) {\n            option.selected = false;\n          }\n        }\n      });\n    }\n    target.previousValue = value;\n    this.setState({ options, ranks });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1 style={{ textAlign: \"center\" }}>Rank your favorite candidates</h1>\n        <form ref={this.container} style={containerStyles}>\n          {this.state.ranks.map((_, i) => (\n            <div key={i} style={optionStyles}>\n              <label style={rankStyles} htmlFor={`menu-${i}`}>\n                {i + 1}\n              </label>\n              <select\n                id={`menu-${i}`}\n                style={dropdownStyles}\n                onChange={this.handleChange}\n              >\n                <option defaultValue value=\"skip\">\n                  Select an option (or skip)\n                </option>\n                {this.state.options.map((o, j) => (\n                  <option\n                    key={`${o.candidate}-${j}`}\n                    value={o.candidate}\n                    disabled={o.selected}\n                  >\n                    {o.candidate}\n                  </option>\n                ))}\n              </select>\n            </div>\n          ))}\n          <div onClick={this.handleSubmit} style={submitStyles}>\n            {this.state.submitted ? \"Nice!\" : \"Submit\"}\n          </div>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}